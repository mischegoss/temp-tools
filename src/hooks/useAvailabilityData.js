// src/hooks/useAvailabilityData.js
import { useState, useEffect } from 'react'

/**
 * Hook to load and manage availability manifest data from the plugin
 * Fetches the generated availability-manifest.json file
 */
export function useAvailabilityData() {
  const [availabilityData, setAvailabilityData] = useState(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    let isMounted = true

    const loadAvailabilityData = async () => {
      try {
        setIsLoading(true)
        setError(null)

        // Fetch the manifest file generated by the plugin
        const response = await fetch('/data/availability-manifest.json')

        if (!response.ok) {
          throw new Error(
            `Failed to load availability manifest: ${response.status}`,
          )
        }

        const data = await response.json()

        if (isMounted) {
          setAvailabilityData(data)
          console.log(
            '✅ Availability manifest loaded:',
            Object.keys(data).length,
            'pages',
          )
        }
      } catch (err) {
        console.warn('⚠️ Failed to load availability manifest:', err.message)

        if (isMounted) {
          setError(err.message)
          // Set empty object as fallback so components can still function
          setAvailabilityData({})
        }
      } finally {
        if (isMounted) {
          setIsLoading(false)
        }
      }
    }

    loadAvailabilityData()

    return () => {
      isMounted = false
    }
  }, [])

  // Provide helper functions for working with the data
  const getPageAvailability = url => {
    if (!availabilityData) return null
    return availabilityData[url] || null
  }

  const getFilteredPages = filters => {
    if (!availabilityData) return []

    return Object.entries(availabilityData).filter(([url, pageData]) => {
      // Role filtering
      if (filters.role === 'users' && !pageData.users) return false
      if (filters.role === 'admin' && !pageData.admin) return false
      // 'all' role shows everything

      // Plan filtering
      if (filters.plans && filters.plans.length > 0) {
        const hasMatchingPlan = filters.plans.some(plan => pageData[plan])
        if (!hasMatchingPlan) return false
      }

      return true
    })
  }

  const getAvailableOptions = () => {
    if (!availabilityData) {
      return {
        hasUsers: false,
        hasAdmin: false,
        hasTrial: false,
        hasPremium: false,
        hasEnterprise: false,
      }
    }

    const allPages = Object.values(availabilityData)

    return {
      hasUsers: allPages.some(page => page.users),
      hasAdmin: allPages.some(page => page.admin),
      hasTrial: allPages.some(page => page.trial),
      hasPremium: allPages.some(page => page.premium),
      hasEnterprise: allPages.some(page => page.enterprise),
    }
  }

  return {
    availabilityData,
    isLoading,
    error,
    getPageAvailability,
    getFilteredPages,
    getAvailableOptions,
  }
}
